/*
* (c) Copyright, Real-Time Innovations, 2012.  All rights reserved.
* RTI grants Licensee a license to use, modify, compile, and create derivative
* works of the software solely for use with RTI Connext DDS. Licensee may
* redistribute copies of the software provided that all such copies are subject
* to this license. The software is provided "as is", with no warranty of any
* type, including any warranty for fitness for any purpose. RTI is under no
* obligation to maintain or support the software. RTI shall not be liable for
* any incidental or consequential damages arising out of the use or inability
* to use the software.
*/

/* FileXfer_publisher.cxx

A publication of data of type file_xfer

This file is derived from code automatically generated by the rtiddsgen 
command:

rtiddsgen -language C++ -example <arch> FileXfer.idl

Example publication of type file_xfer automatically generated by 
'rtiddsgen'. To test it, follow these steps:

(1) Compile this file and the example subscription.

(2) Start the subscription

(3) Start the publication

(4) [Optional] Specify the list of discovery initial peers and 
multicast receive addresses via an environment variable or a file 
(in the current working directory) called NDDS_DISCOVERY_PEERS. 

You can run any number of publisher and subscriber programs, and can 
add and remove them dynamically from the domain.
*/

#include <stdio.h>
#include <stdlib.h>

#include "FileXfer.h"
#include "FileXferSupport.h"
#include "ndds/ndds_cpp.h"

int send_file(const char* filename, file_xferDataWriter* writer);

/* Delete all entities */
static int publisher_shutdown(
    DDSDomainParticipant *participant)
{
    DDS_ReturnCode_t retcode;
    int status = 0;

    if (participant != NULL) {
        retcode = participant->delete_contained_entities();
        if (retcode != DDS_RETCODE_OK) {
            fprintf(stderr, "delete_contained_entities error %d\n", retcode);
            status = -1;
        }

        retcode = DDSTheParticipantFactory->delete_participant(participant);
        if (retcode != DDS_RETCODE_OK) {
            fprintf(stderr, "delete_participant error %d\n", retcode);
            status = -1;
        }
    }

    /* RTI Connext provides finalize_instance() method on
    domain participant factory for people who want to release memory used
    by the participant factory. Uncomment the following block of code for
    clean destruction of the singleton. */
    /*

    retcode = DDSDomainParticipantFactory::finalize_instance();
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "finalize_instance error %d\n", retcode);
        status = -1;
    }
    */

    return status;
}

/* Writes out a file using the given datawriter
   Returns 0 on success, <0 for errors
*/
int send_file(const char* filename, file_xferDataWriter* writer) {
    DDS_ReturnCode_t retcode;
    DDS_LongLong pct_remain;
    DDS_LongLong last_pct_remain = 101;

    file_xfer *instance = file_xferTypeSupport::create_data();

    if (instance == NULL) {
        printf("file_xferTypeSupport::create_data error\n");
        return -1;
    }

    FILE* pInFile = fopen(filename, "rb");
    if(pInFile == NULL) {
        printf("fopen error for '%s'\n", filename);
        return -2;
    }

    strcpy(instance->filename, filename);
    fseek(pInFile, 0, SEEK_END);
    instance->remaining_bytes = 
        instance->total_bytes = ftell(pInFile);
    rewind(pInFile);
    
    char *buf = new char[MAX_MSG_LENGTH];
    instance->chunk.maximum(0);
    instance->chunk.loan_contiguous((DDS_Octet*)buf, 0, MAX_MSG_LENGTH);

    printf("fileSize = %d\n", instance->total_bytes);

    DDS_InstanceHandle_t instance_handle = writer->register_instance(*instance);
    DDS_Duration_t sleep_period = {0, 5000000};
    static const long bigchunk = 100*1024;
    long next_pause = instance->remaining_bytes - bigchunk;

    while (instance->remaining_bytes > 0) {
        if (instance->remaining_bytes < next_pause) {
            NDDSUtility::sleep(sleep_period);
            next_pause -= bigchunk;
        }

        long len = (instance->remaining_bytes > MAX_MSG_LENGTH) ?
            MAX_MSG_LENGTH : instance->remaining_bytes;
        if (fread(buf, 1, len, pInFile) != len) {
            printf("read error\n");
            return -3;            
        }

        // read OK, update sample
        instance->chunk.length(len);
        instance->remaining_bytes -= len;
                
        // loop if we timeout
        do {
            retcode = writer->write(*instance, instance_handle);
            if (retcode == DDS_RETCODE_ERROR) {
                printf("write error\n");
                return -4;
            }
        } while (retcode == DDS_RETCODE_TIMEOUT);

        pct_remain = (DDS_LongLong) ((DDS_LongLong) instance->remaining_bytes * 100) / (DDS_LongLong)instance->total_bytes;
        //printf("%d %d %d\n", cur.total_bytes, cur.remaining_bytes, pct_complete);
        if (pct_remain != last_pct_remain)
        {
            if (pct_remain % 10 == 0) 
            {
                //printf("Rem: %lld  %lld\n", pct_remain, last_pct_remain);
                printf("Rem: %lld\n", pct_remain );
                last_pct_remain = pct_remain;
            }
        }

    }

    DDS_Duration_t timeout = {10, 0};
    retcode = writer->wait_for_asynchronous_publishing(timeout);
    if (retcode != DDS_RETCODE_OK) {
        if (retcode == DDS_RETCODE_TIMEOUT) {
            printf("wait_for_async_pub timeout\n");
        } else {
            printf("wait_for_async_pub error %d\n", retcode);
        }
        return -5;
    }

    retcode = writer->dispose(*instance, instance_handle);
    if (retcode != DDS_RETCODE_OK) {
        printf("dispose error %d\n", retcode);
    }

    instance->chunk.unloan();
    delete[] buf;
    /* Delete data sample */
    retcode = file_xferTypeSupport::delete_data(instance);
    if (retcode != DDS_RETCODE_OK) {
        printf("file_xferTypeSupport::delete_data error %d\n", retcode);
        return -5;
    }

    fclose(pInFile);

    return 0;
}


extern "C" int publisher_main(int domainId, int sample_count)
{
    DDSDomainParticipant *participant = NULL;
    DDSPublisher *publisher = NULL;
    DDSTopic *topic = NULL;
    DDSDataWriter *writer = NULL;
    file_xferDataWriter * file_xfer_writer = NULL;
    //file_xfer *instance = NULL;
    DDS_ReturnCode_t retcode;
    //DDS_InstanceHandle_t instance_handle = DDS_HANDLE_NIL;
    const char *type_name = NULL;
    int count = 0;  
    //DDS_Duration_t send_period = {4,0};

    // Flow controller
    const char *cfc_name = "Custom_Flowcontroller";
    DDSFlowController *flowController = NULL;
    DDS_FlowControllerProperty_t flowProperty; // Properties to configure flow controller

    /* To customize participant QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    participant = DDSTheParticipantFactory->create_participant(
        domainId, DDS_PARTICIPANT_QOS_DEFAULT, 
        NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (participant == NULL) {
        fprintf(stderr, "create_participant error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /*

    // Get the properties for the default flow controller on the participant and tweak them
    retcode = participant->get_default_flowcontroller_property(flowProperty);
    if (retcode != DDS_RETCODE_OK)
    {
        printf("get_default_flowcontroller_property returned error: %d\n", retcode);
        return -1;
    }

    flowProperty.token_bucket.period.sec                = 0;
    flowProperty.token_bucket.period.nanosec            = 100000000;   // 100 ms
    flowProperty.token_bucket.bytes_per_token           = 1024;
    flowProperty.token_bucket.max_tokens                = 100;
    flowProperty.token_bucket.tokens_added_per_period   = 100;
    flowProperty.token_bucket.tokens_leaked_per_period  = 0;

    flowController = participant->create_flowcontroller(DDS_String_dup(cfc_name), flowProperty);
    if (flowController == NULL) {
        printf("flow controller error\n");
        return -1;
    }
    */


    /* To customize publisher QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    publisher = participant->create_publisher(
        DDS_PUBLISHER_QOS_DEFAULT, NULL /* listener */, DDS_STATUS_MASK_NONE);
    if (publisher == NULL) {
        fprintf(stderr, "create_publisher error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* Register type before creating topic */
    type_name = file_xferTypeSupport::get_type_name();
    retcode = file_xferTypeSupport::register_type(
        participant, type_name);
    if (retcode != DDS_RETCODE_OK) {
        fprintf(stderr, "register_type error %d\n", retcode);
        publisher_shutdown(participant);
        return -1;
    }

    /* To customize topic QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    topic = participant->create_topic(
        file_xfer_topic, 
        type_name, DDS_TOPIC_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (topic == NULL) {
        fprintf(stderr, "create_topic error\n");
        publisher_shutdown(participant);
        return -1;
    }

    /* To customize data writer QoS, use 
    the configuration file USER_QOS_PROFILES.xml */
    writer = publisher->create_datawriter(
        topic, DDS_DATAWRITER_QOS_DEFAULT, NULL /* listener */,
        DDS_STATUS_MASK_NONE);
    if (writer == NULL) {
        fprintf(stderr, "create_datawriter error\n");
        publisher_shutdown(participant);
        return -1;
    }
    file_xfer_writer = file_xferDataWriter::narrow(writer);
    if (file_xfer_writer == NULL) {
        fprintf(stderr, "DataWriter narrow error\n");
        publisher_shutdown(participant);
        return -1;
    }

    // Wait for a matched subscriber
    DDS_Duration_t sleep_period = {1,0};
    DDS_PublicationMatchedStatus status;
    do {
        file_xfer_writer->get_publication_matched_status(status);
        NDDSUtility::sleep(sleep_period);
    } while (status.current_count == 0);

    printf("Sending file\n");
    int result = send_file("test.data", file_xfer_writer);

    NDDSUtility::sleep(sleep_period);

    /* Delete all entities */
    return publisher_shutdown(participant);
}

int main(int argc, char *argv[])
{
    int domain_id = 0;
    int sample_count = 0; /* infinite loop */

    if (argc >= 2) {
        domain_id = atoi(argv[1]);
    }
    if (argc >= 3) {
        sample_count = atoi(argv[2]);
    }

    /* Uncomment this to turn on additional logging
    NDDSConfigLogger::get_instance()->
    set_verbosity_by_category(NDDS_CONFIG_LOG_CATEGORY_API, 
    NDDS_CONFIG_LOG_VERBOSITY_STATUS_ALL);
    */

    return publisher_main(domain_id, sample_count);
}

